// CSS Normalize
article,aside,details,figcaption,figure,footer,header,hgroup,nav,section,summary{display:block;}audio,canvas,video{display:inline-block;}audio:not([controls]){display:none;height:0;}[hidden]{display:none;}html{font-family:sans-serif;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%;}a:focus{outline:thin dotted;}a:active,a:hover{outline:0;}h1{font-size:2em;}abbr[title]{border-bottom:1px dotted;}b,strong{font-weight:700;}dfn{font-style:italic;}mark{background:#ff0;color:#000;}code,kbd,pre,samp{font-family:monospace, serif;font-size:1em;}pre{white-space:pre-wrap;word-wrap:break-word;}q{quotes:\201C \201D \2018 \2019;}small{font-size:80%;}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline;}sup{top:-.5em;}sub{bottom:-.25em;}img{border:0;}svg:not(:root){overflow:hidden;}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em;}button,input,select,textarea{font-family:inherit;font-size:100%;margin:0;}button,input{line-height:normal;}button,html input[type=button],/* 1 */
input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer;}button[disabled],input[disabled]{cursor:default;}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0;}input[type=search]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box;}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none;}textarea{overflow:auto;vertical-align:top;}table{border-collapse:collapse;border-spacing:0;}body,figure{margin:0;}legend,button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0;}

// Box-sizing border-box
* { -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box; }

$chartColors: #56c7fa, #f76540, #ffcb05, #62cd9f, #b67baa;

@for $i from 1 through length($chartColors) {
	$chartColors: append($chartColors, darken(nth($chartColors, $i), 25));
}
$chartColorsLength: length($chartColors);

.box {
	text-align: center;
	color:#FFFFFF;
	font-size: 100px;
	text-shadow: 4px 4px 0 rgba(0, 0, 0, 0.1);
	padding: 10px;
	
	@for $i from 1 through $chartColorsLength {
		&:nth-of-type(#{$chartColorsLength}n+#{$i}) {
			background-color: nth($chartColors, $i);
			
			&:before {
				// content: '#{nth($chartColors, $i)}'
				content: '#{$i}'
			}
		}
	}  
}

// Example 1 
// this will show elements equality distributed
// .container {
// 	border: 10px solid red;
// 	display:flex;

// 	//justify-content:flex-end;
// 	//justify-content:center;
// 	// justify-content:space-between; // places 1st element on the left, last element on the right, 
// 	// then it distributes the content along the available space.
// 	justify-content:space-around; //same as above but puts some space in the 1st and last element too
// 	flex-direction:row;
// }

// Example 2
// this will show all element as column centered
// .container {
// 	border: 10px solid red;
// 	display:flex;
// 	justify-content:center;	// align content at the center
// 	//justify-content:space-between; // this will equality distribute elements in the column
// 	flex-direction:column; // show as column

// 	min-height: 100vh; //let make container use full space available on screen

// 	.box {
// 		font-size: 30px; //lest decrease size so it won't be using all the space
// 	}
// }

// Example 3
// this will center elements on the base line no matter size of each one
// .container {
// 	border: 10px solid red;
// 	display:flex;
// 	height: 100vh; //let make container use full space available on screen
// 	align-items:baseline;

// 	.box:nth-child(2n) {
// 		font-size: 80px;
// 	}
// 	.box:nth-child(2n+1) {
// 		font-size: 40px;
// 	}
// }


// Example 4
// Aligns elements on the center of screen, last element (div, 10th) also get centered
.container{
	display: flex;
	border: 10px solid red;
	height: 100vh;
	flex-wrap: wrap;
	align-content:center; // works withg the cross axis (y)
	justify-content: center; //works with main axis (x)

	.box {
		width: 33.33%;
	}
}

